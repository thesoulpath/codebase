#!/usr/bin/env node

/**
 * Script de configuraci√≥n del Orquestador Conversacional
 * Ejecutar con: node scripts/setup-orchestrator.js
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üöÄ Configurando Orquestador Conversacional...\n');

// Verificar que estamos en el directorio correcto
const packageJsonPath = path.join(process.cwd(), 'package.json');
if (!fs.existsSync(packageJsonPath)) {
  console.error('‚ùå Error: No se encontr√≥ package.json. Ejecuta este script desde la ra√≠z del proyecto.');
  process.exit(1);
}

// Verificar dependencias
console.log('üì¶ Verificando dependencias...');
const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
const requiredDeps = ['axios', 'twilio', '@types/twilio'];

const missingDeps = requiredDeps.filter(dep => 
  !packageJson.dependencies[dep] && !packageJson.devDependencies[dep]
);

if (missingDeps.length > 0) {
  console.log(`‚ö†Ô∏è  Instalando dependencias faltantes: ${missingDeps.join(', ')}`);
  try {
    execSync(`npm install ${missingDeps.join(' ')}`, { stdio: 'inherit' });
    console.log('‚úÖ Dependencias instaladas correctamente');
  } catch (error) {
    console.error('‚ùå Error instalando dependencias:', error.message);
    process.exit(1);
  }
} else {
  console.log('‚úÖ Todas las dependencias est√°n instaladas');
}

// Crear archivo de configuraci√≥n de entorno si no existe
const envPath = path.join(process.cwd(), '.env.local');
const envExamplePath = path.join(process.cwd(), 'orchestrator.env.example');

if (!fs.existsSync(envPath)) {
  console.log('üìù Creando archivo de configuraci√≥n...');
  if (fs.existsSync(envExamplePath)) {
    fs.copyFileSync(envExamplePath, envPath);
    console.log('‚úÖ Archivo .env.local creado desde orchestrator.env.example');
    console.log('‚ö†Ô∏è  Recuerda configurar las variables de entorno en .env.local');
  } else {
    console.log('‚ö†Ô∏è  No se encontr√≥ orchestrator.env.example');
  }
} else {
  console.log('‚úÖ Archivo .env.local ya existe');
}

// Crear directorio de logs si no existe
const logsDir = path.join(process.cwd(), 'logs');
if (!fs.existsSync(logsDir)) {
  fs.mkdirSync(logsDir, { recursive: true });
  console.log('‚úÖ Directorio de logs creado');
}

// Verificar estructura de archivos
console.log('\nüìÅ Verificando estructura de archivos...');
const requiredFiles = [
  'lib/types/conversational-orchestrator.ts',
  'lib/services/rasa-service.ts',
  'lib/services/openrouter-service.ts',
  'lib/services/twilio-service.ts',
  'lib/services/api-service.ts',
  'lib/services/logging-service.ts',
  'lib/services/conversational-orchestrator.ts',
  'app/api/whatsapp/webhook/route.ts',
  'app/api/orchestrator/route.ts',
  'app/api/orchestrator/test/route.ts',
  'scripts/create-conversation-logs-table.sql'
];

const missingFiles = requiredFiles.filter(file => !fs.existsSync(path.join(process.cwd(), file)));

if (missingFiles.length > 0) {
  console.log('‚ùå Archivos faltantes:');
  missingFiles.forEach(file => console.log(`   - ${file}`));
  console.log('\n‚ö†Ô∏è  Algunos archivos del orquestador no se encontraron. Verifica la instalaci√≥n.');
} else {
  console.log('‚úÖ Todos los archivos del orquestador est√°n presentes');
}

// Crear script de testing
console.log('\nüß™ Creando script de testing...');
const testScript = `#!/usr/bin/env node

/**
 * Script de testing del Orquestador Conversacional
 * Ejecutar con: node scripts/test-orchestrator.js
 */

const axios = require('axios');

const BASE_URL = process.env.API_BASE_URL || 'http://localhost:3000/api';

async function testOrchestrator() {
  console.log('üß™ Iniciando tests del Orquestador Conversacional...\\n');

  try {
    // Test 1: Health Check
    console.log('1Ô∏è‚É£  Probando health check...');
    const healthResponse = await axios.get(\`\${BASE_URL}/orchestrator?action=health\`);
    console.log('‚úÖ Health check:', healthResponse.data.data.overall ? 'OK' : 'FAILED');
    console.log('   Servicios:', healthResponse.data.data.services);

    // Test 2: Ejemplos de mensajes
    console.log('\\n2Ô∏è‚É£  Obteniendo ejemplos de mensajes...');
    const examplesResponse = await axios.get(\`\${BASE_URL}/orchestrator/test?type=examples\`);
    console.log('‚úÖ Ejemplos obtenidos:', examplesResponse.data.data.testMessages.length, 'mensajes');

    // Test 3: Procesar mensaje de prueba
    console.log('\\n3Ô∏è‚É£  Probando procesamiento de mensaje...');
    const testMessage = {
      message: 'Hola, ¬øqu√© paquetes tienen disponibles?',
      userId: 'test_user_123',
      testType: 'full'
    };
    
    const processResponse = await axios.post(\`\${BASE_URL}/orchestrator/test\`, testMessage);
    console.log('‚úÖ Mensaje procesado:', processResponse.data.success ? 'OK' : 'FAILED');
    if (processResponse.data.success) {
      console.log('   Tiempo de procesamiento:', processResponse.data.data.processingTime, 'ms');
    }

    // Test 4: Estad√≠sticas
    console.log('\\n4Ô∏è‚É£  Obteniendo estad√≠sticas...');
    const statsResponse = await axios.get(\`\${BASE_URL}/orchestrator/test?type=stats\`);
    console.log('‚úÖ Estad√≠sticas obtenidas:', statsResponse.data.success ? 'OK' : 'FAILED');

    console.log('\\nüéâ Todos los tests completados exitosamente!');

  } catch (error) {
    console.error('‚ùå Error en los tests:', error.message);
    if (error.response) {
      console.error('   Status:', error.response.status);
      console.error('   Data:', error.response.data);
    }
    process.exit(1);
  }
}

// Ejecutar tests si se llama directamente
if (require.main === module) {
  testOrchestrator();
}

module.exports = { testOrchestrator };
`;

fs.writeFileSync(path.join(process.cwd(), 'scripts', 'test-orchestrator.js'), testScript);
console.log('‚úÖ Script de testing creado: scripts/test-orchestrator.js');

// Crear script de migraci√≥n de base de datos
console.log('\nüóÑÔ∏è  Creando script de migraci√≥n...');
const migrationScript = `#!/usr/bin/env node

/**
 * Script de migraci√≥n de base de datos para el Orquestador
 * Ejecutar con: node scripts/migrate-orchestrator.js
 */

const { execSync } = require('child_process');
const path = require('path');

async function migrateDatabase() {
  console.log('üóÑÔ∏è  Ejecutando migraci√≥n de base de datos...\\n');

  try {
    const sqlFile = path.join(__dirname, 'create-conversation-logs-table.sql');
    
    // Verificar que el archivo SQL existe
    const fs = require('fs');
    if (!fs.existsSync(sqlFile)) {
      console.error('‚ùå No se encontr√≥ el archivo SQL de migraci√≥n');
      process.exit(1);
    }

    // Ejecutar migraci√≥n usando psql
    console.log('üìù Ejecutando migraci√≥n...');
    execSync(\`psql -d \$DATABASE_URL -f \${sqlFile}\`, { stdio: 'inherit' });
    
    console.log('‚úÖ Migraci√≥n completada exitosamente');
    console.log('\\nüìä Tabla conversation_logs creada con:');
    console.log('   - √çndices optimizados para consultas');
    console.log('   - Vistas para estad√≠sticas');
    console.log('   - Funciones de limpieza autom√°tica');
    console.log('   - Funciones de an√°lisis por usuario');

  } catch (error) {
    console.error('‚ùå Error en la migraci√≥n:', error.message);
    console.log('\\nüí° Aseg√∫rate de que:');
    console.log('   1. PostgreSQL est√© ejecut√°ndose');
    console.log('   2. La variable DATABASE_URL est√© configurada');
    console.log('   3. Tengas permisos para crear tablas');
    process.exit(1);
  }
}

// Ejecutar migraci√≥n si se llama directamente
if (require.main === module) {
  migrateDatabase();
}

module.exports = { migrateDatabase };
`;

fs.writeFileSync(path.join(process.cwd(), 'scripts', 'migrate-orchestrator.js'), migrationScript);
console.log('‚úÖ Script de migraci√≥n creado: scripts/migrate-orchestrator.js');

// Hacer los scripts ejecutables
try {
  execSync('chmod +x scripts/test-orchestrator.js scripts/migrate-orchestrator.js', { stdio: 'inherit' });
  console.log('‚úÖ Scripts marcados como ejecutables');
} catch (error) {
  console.log('‚ö†Ô∏è  No se pudieron hacer ejecutables los scripts (esto es normal en Windows)');
}

// Mostrar resumen
console.log('\nüéâ Configuraci√≥n completada!');
console.log('\nüìã Pr√≥ximos pasos:');
console.log('1. Configura las variables de entorno en .env.local');
console.log('2. Ejecuta la migraci√≥n de base de datos: node scripts/migrate-orchestrator.js');
console.log('3. Inicia tu servidor: npm run dev');
console.log('4. Prueba el orquestador: node scripts/test-orchestrator.js');
console.log('\nüîó Endpoints disponibles:');
console.log('   - POST /api/whatsapp/webhook (webhook de Twilio)');
console.log('   - GET  /api/orchestrator?action=health (health check)');
console.log('   - GET  /api/orchestrator/test?type=examples (ejemplos)');
console.log('   - POST /api/orchestrator/test (probar mensajes)');
console.log('\nüìö Documentaci√≥n:');
console.log('   - Ver orchestrator.env.example para configuraci√≥n');
console.log('   - Ver scripts/create-conversation-logs-table.sql para esquema de BD');
console.log('   - Ver lib/types/conversational-orchestrator.ts para tipos TypeScript');
