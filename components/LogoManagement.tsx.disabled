import { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { Save, Upload, Type, Image as ImageIcon, Eye, EyeOff, Trash2, RefreshCw } from 'lucide-react';
import { BaseButton } from './ui/BaseButton';
import { BaseInput } from './ui/BaseInput';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';
import { Label } from './ui/label';
import { Switch } from './ui/switch';
import { useAuth } from '../hooks/useAuth';



interface LogoSettings {
  type: 'text' | 'image';
  text: string;
  imageUrl?: string;
  imageFile?: string;
  isActive: boolean;
}

export function LogoManagement() {
  const { user } = useAuth();
  const [logoSettings, setLogoSettings] = useState<LogoSettings>({
    type: 'text',
    text: 'SOULPATH',
    isActive: true
  });
  const [originalSettings, setOriginalSettings] = useState<LogoSettings>({
    type: 'text',
    text: 'SOULPATH',
    isActive: true
  });
  const [isLoading, setIsLoading] = useState(true);
  const [isSaving, setIsSaving] = useState(false);
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);
  const [showPreview, setShowPreview] = useState(false);
  const [uploadingImage, setUploadingImage] = useState(false);

  // Check for unsaved changes
  useEffect(() => {
    const hasChanges = JSON.stringify(logoSettings) !== JSON.stringify(originalSettings);
    setHasUnsavedChanges(hasChanges);
  }, [logoSettings, originalSettings]);

  // Load logo settings on mount
  useEffect(() => {
    loadLogoSettings();
  }, []);

  const loadLogoSettings = async () => {
    try {
      setIsLoading(true);
      
      console.log('Loading logo settings...');
      const response = await fetch(`/api/logo`, {
        headers: {
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        const data = await response.json();
        
        // If no settings exist in database, use default
        const loadedSettings = data.logo || {
          type: 'text',
          text: 'SOULPATH',
          isActive: true
        };
        
        console.log('Logo settings loaded successfully:', loadedSettings);
        setLogoSettings(loadedSettings);
        setOriginalSettings(loadedSettings);
      } else {
        console.log('Logo endpoint returned non-OK status:', response.status, response.statusText);
        // Use default settings on server error
        const defaultSettings = {
          type: 'text' as const,
          text: 'SOULPATH',
          isActive: true
        };
        setLogoSettings(defaultSettings);
        setOriginalSettings(defaultSettings);
      }
    } catch (error) {
      console.error('Error loading logo settings:', error);
      // Use default settings on error - this is not a critical failure
      const defaultSettings = {
        type: 'text' as const,
        text: 'SOULPATH',
        isActive: true
      };
      setLogoSettings(defaultSettings);
      setOriginalSettings(defaultSettings);
    } finally {
      setIsLoading(false);
    }
  };

  const saveLogoSettings = async () => {
    if (!user?.access_token) return;
    
    try {
      setIsSaving(true);
      
      const response = await fetch(`/api/admin/logo`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${user.access_token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ logo: logoSettings })
      });

      if (!response.ok) {
        throw new Error('Failed to save logo settings');
      }
      
      setOriginalSettings(logoSettings);
      setHasUnsavedChanges(false);
      alert('Logo settings saved successfully!');
    } catch (error) {
      console.error('Error saving logo settings:', error);
      alert('Failed to save logo settings. Please try again.');
    } finally {
      setIsSaving(false);
    }
  };

  const handleImageUpload = async (file: File) => {
    if (!user?.access_token) return;
    
    try {
      setUploadingImage(true);
      
      const formData = new FormData();
      formData.append('image', file);
      formData.append('type', 'logo');
      
      const response = await fetch(`/api/admin/images/logo`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${user.access_token}`
        },
        body: formData
      });

      if (!response.ok) {
        throw new Error('Failed to upload image');
      }
      
      const data = await response.json();
      
      setLogoSettings(prev => ({
        ...prev,
        type: 'image',
        imageUrl: data.url,
        imageFile: data.filename
      }));
      
      alert('Logo image uploaded successfully!');
    } catch (error) {
      console.error('Error uploading logo image:', error);
      alert('Failed to upload image. Please try again.');
    } finally {
      setUploadingImage(false);
    }
  };

  const resetToDefault = () => {
    if (confirm('This will reset the logo to default settings. Are you sure?')) {
      const defaultSettings = {
        type: 'text' as const,
        text: 'SOULPATH',
        isActive: true
      };
      setLogoSettings(defaultSettings);
    }
  };

  const discardChanges = () => {
    if (confirm('This will discard all unsaved changes. Are you sure?')) {
      setLogoSettings(originalSettings);
    }
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <motion.div
          animate={{ rotate: 360 }}
          transition={{ duration: 2, repeat: Infinity, ease: "linear" }}
          className="w-8 h-8 border-4 border-[#FFD700] border-t-transparent rounded-full"
        />
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-heading text-[#EAEAEA] mb-2">Logo Management</h2>
          <p className="text-[#C0C0C0]">Customize the website logo (text or image)</p>
        </div>
        
        <div className="flex items-center space-x-3">
          {hasUnsavedChanges && (
            <div className="flex items-center space-x-2">
              <div className="w-2 h-2 bg-yellow-500 rounded-full animate-pulse"></div>
              <span className="text-sm text-yellow-400">Unsaved changes</span>
            </div>
          )}
          
          <BaseButton
            onClick={discardChanges}
            size="sm"
            disabled={!hasUnsavedChanges}
            className="dashboard-button-reload"
          >
            <RefreshCw size={16} className="mr-2" />
            Discard
          </BaseButton>
          
          <BaseButton
            onClick={resetToDefault}
            variant="outline"
            size="sm"
            className="border-red-500/30 text-red-400 hover:bg-red-500/10"
          >
            <Trash2 size={16} className="mr-2" />
            Reset
          </BaseButton>
          
          <BaseButton
            onClick={saveLogoSettings}
            disabled={isSaving || !hasUnsavedChanges}
            className="dashboard-button-primary"
          >
            {isSaving ? (
              <motion.div
                animate={{ rotate: 360 }}
                transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
                className="w-4 h-4 border-2 border-[#0A0A23] border-t-transparent rounded-full mr-2"
              />
            ) : (
              <Save size={16} className="mr-2" />
            )}
            Save Changes
          </BaseButton>
        </div>
      </div>

      {/* Help Section */}
      <div className="bg-[#191970]/20 border border-[#FFD700]/20 rounded-lg p-4">
        <h3 className="text-lg font-heading text-[#FFD700] mb-3">Logo Configuration</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-[#EAEAEA]/80">
          <div>
            <h4 className="font-medium text-[#EAEAEA] mb-2">üìù Text Logo:</h4>
            <ul className="space-y-1 list-disc list-inside">
              <li>Use text-based logo (current: SOULPATH)</li>
              <li>Customize the text content</li>
              <li>Automatically styled with cosmic theme</li>
              <li>Best for simple, readable branding</li>
            </ul>
          </div>
          <div>
            <h4 className="font-medium text-[#EAEAEA] mb-2">üñºÔ∏è Image Logo:</h4>
            <ul className="space-y-1 list-disc list-inside">
              <li>Upload custom logo image</li>
              <li>Supports PNG, JPG, SVG formats</li>
              <li>Recommended size: 200x60 pixels</li>
              <li>Transparent background recommended</li>
            </ul>
          </div>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Logo Configuration */}
        <Card className="bg-[#191970]/30 border-[#C0C0C0]/20">
          <CardHeader>
            <CardTitle className="text-[#EAEAEA] text-lg">Logo Settings</CardTitle>
            <CardDescription className="text-[#C0C0C0]">
              Choose between text or image logo
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* Logo Type Switch */}
            <div className="space-y-3">
              <Label className="text-[#C0C0C0]">Logo Type</Label>
              <div className="flex items-center space-x-4">
                <div className="flex items-center space-x-2">
                  <input
                    type="radio"
                    id="text-logo"
                    name="logo-type"
                    checked={logoSettings.type === 'text'}
                    onChange={() => setLogoSettings(prev => ({ ...prev, type: 'text' }))}
                    className="text-[#FFD700] bg-[#0A0A23] border-[#C0C0C0]/30"
                  />
                  <label htmlFor="text-logo" className="text-[#EAEAEA] flex items-center space-x-1">
                    <Type size={16} />
                    <span>Text Logo</span>
                  </label>
                </div>
                
                <div className="flex items-center space-x-2">
                  <input
                    type="radio"
                    id="image-logo"
                    name="logo-type"
                    checked={logoSettings.type === 'image'}
                    onChange={() => setLogoSettings(prev => ({ ...prev, type: 'image' }))}
                    className="text-[#FFD700] bg-[#0A0A23] border-[#C0C0C0]/30"
                  />
                  <label htmlFor="image-logo" className="text-[#EAEAEA] flex items-center space-x-1">
                    <ImageIcon size={16} />
                    <span>Image Logo</span>
                  </label>
                </div>
              </div>
            </div>

            {/* Text Logo Configuration */}
            {logoSettings.type === 'text' && (
              <div className="space-y-3">
                <Label htmlFor="logo-text" className="text-[#C0C0C0]">
                  Logo Text
                </Label>
                <BaseInput
                  id="logo-text"
                  type="text"
                  value={logoSettings.text}
                  onChange={(e) => setLogoSettings(prev => ({ ...prev, text: e.target.value }))}
                  placeholder="Enter logo text..."
                  className="bg-[#0A0A23]/50 border-[#C0C0C0]/30 text-[#EAEAEA]"
                />
                <p className="text-xs text-[#C0C0C0]/70">
                  This text will appear in the header navigation
                </p>
              </div>
            )}

            {/* Image Logo Configuration */}
            {logoSettings.type === 'image' && (
              <div className="space-y-4">
                <Label className="text-[#C0C0C0]">Logo Image</Label>
                
                {logoSettings.imageUrl && (
                  <div className="p-3 bg-[#0A0A23]/30 border border-[#C0C0C0]/20 rounded-lg">
                    <p className="text-xs text-[#C0C0C0] mb-2">Current Logo:</p>
                    <img 
                      src={logoSettings.imageUrl} 
                      alt="Current Logo" 
                      className="max-h-16 object-contain"
                    />
                  </div>
                )}
                
                <div className="space-y-3">
                  <input
                    type="file"
                    id="logo-upload"
                    accept="image/*"
                    onChange={(e) => {
                      const file = e.target.files?.[0];
                      if (file) handleImageUpload(file);
                    }}
                    className="hidden"
                  />
                  <BaseButton
                    onClick={() => document.getElementById('logo-upload')?.click()}
                    variant="outline"
                    disabled={uploadingImage}
                    className="w-full border-[#FFD700]/30 text-[#FFD700] hover:bg-[#FFD700]/10"
                  >
                    {uploadingImage ? (
                      <motion.div
                        animate={{ rotate: 360 }}
                        transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
                        className="w-4 h-4 border-2 border-[#FFD700] border-t-transparent rounded-full mr-2"
                      />
                    ) : (
                      <Upload size={16} className="mr-2" />
                    )}
                    Upload New Logo
                  </BaseButton>
                </div>
                
                <p className="text-xs text-[#C0C0C0]/70">
                  Recommended: PNG with transparent background, 200x60px
                </p>
              </div>
            )}

            {/* Logo Status */}
            <div className="flex items-center justify-between p-3 bg-[#0A0A23]/30 border border-[#C0C0C0]/20 rounded-lg">
              <div>
                <Label className="text-[#C0C0C0]">Logo Active</Label>
                <p className="text-xs text-[#C0C0C0]/70">Show logo in header</p>
              </div>
              <Switch
                checked={logoSettings.isActive}
                onCheckedChange={(checked) => 
                  setLogoSettings(prev => ({ ...prev, isActive: checked }))
                }
              />
            </div>
          </CardContent>
        </Card>

        {/* Logo Preview */}
        <Card className="bg-[#191970]/30 border-[#C0C0C0]/20">
          <CardHeader>
            <div className="flex items-center justify-between">
              <CardTitle className="text-[#EAEAEA] text-lg">Preview</CardTitle>
              <BaseButton
                onClick={() => setShowPreview(!showPreview)}
                variant="outline"
                size="sm"
                className="border-[#FFD700]/30 text-[#FFD700] hover:bg-[#FFD700]/10"
              >
                {showPreview ? <EyeOff size={16} className="mr-2" /> : <Eye size={16} className="mr-2" />}
                {showPreview ? 'Hide' : 'Show'} Preview
              </BaseButton>
            </div>
            <CardDescription className="text-[#C0C0C0]">
              See how your logo will appear in the header
            </CardDescription>
          </CardHeader>
          <CardContent>
            {showPreview && (
              <div className="space-y-4">
                {/* Header Preview */}
                <div className="p-4 bg-black/20 border border-[#C0C0C0]/20 rounded-lg backdrop-blur-sm">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-2">
                      {logoSettings.isActive ? (
                        logoSettings.type === 'text' ? (
                          <span className="font-heading text-xl text-[#FFD700]">
                            {logoSettings.text || 'SOULPATH'}
                          </span>
                        ) : logoSettings.imageUrl ? (
                          <img 
                            src={logoSettings.imageUrl} 
                            alt="Logo Preview" 
                            className="h-8 object-contain"
                          />
                        ) : (
                          <span className="text-[#C0C0C0]/50 text-sm">No image selected</span>
                        )
                      ) : (
                        <span className="text-[#C0C0C0]/50 text-sm">Logo hidden</span>
                      )}
                      <div className="w-8 h-px bg-[#FFD700] rounded-full"></div>
                    </div>
                    <div className="flex items-center space-x-3 text-sm text-[#C0C0C0]">
                      <span>EN</span>
                      <span>|</span>
                      <span>ES</span>
                      <div className="w-6 h-6 bg-[#FFD700]/20 rounded border border-[#FFD700]/30"></div>
                    </div>
                  </div>
                </div>

                {/* Logo Info */}
                <div className="space-y-2 text-sm">
                  <div className="flex justify-between">
                    <span className="text-[#C0C0C0]">Type:</span>
                    <span className="text-[#EAEAEA] capitalize">{logoSettings.type}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-[#C0C0C0]">Status:</span>
                    <span className={logoSettings.isActive ? 'text-green-400' : 'text-red-400'}>
                      {logoSettings.isActive ? 'Active' : 'Hidden'}
                    </span>
                  </div>
                  {logoSettings.type === 'text' && (
                    <div className="flex justify-between">
                      <span className="text-[#C0C0C0]">Text:</span>
                      <span className="text-[#EAEAEA]">{logoSettings.text || 'Not set'}</span>
                    </div>
                  )}
                </div>
              </div>
            )}
          </CardContent>
        </Card>

      {/* Quick Actions */}
      {hasUnsavedChanges && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="fixed bottom-6 right-6 z-50"
        >
          <Card className="bg-[#191970]/90 backdrop-blur-lg border-[#FFD700]/30 shadow-lg shadow-[#FFD700]/20">
            <CardContent className="p-4">
              <div className="flex items-center space-x-3">
                <div className="w-2 h-2 bg-yellow-500 rounded-full animate-pulse"></div>
                <span className="text-[#EAEAEA] text-sm">You have unsaved changes</span>
                <div className="flex space-x-2">
                  <BaseButton
                    onClick={discardChanges}
                    variant="outline"
                    size="sm"
                    className="border-[#C0C0C0]/30 text-[#C0C0C0] hover:bg-[#C0C0C0]/10"
                  >
                    Discard
                  </BaseButton>
                  <BaseButton
                    onClick={saveLogoSettings}
                    disabled={isSaving}
                    size="sm"
                    className="dashboard-button-primary"
                  >
                    {isSaving ? (
                      <motion.div
                        animate={{ rotate: 360 }}
                        transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
                        className="w-3 h-3 border-2 border-[#0A0A23] border-t-transparent rounded-full"
                      />
                    ) : (
                      'Save'
                    )}
                  </BaseButton>
                </div>
              </div>
            </CardContent>
          </Card>
        </motion.div>
      )}
    </div>
  );
}
